import controlP5.*;
import java.util.*;

// Globale variabler
Layout layout;
MapRenderer mapRenderer;
UIController uiController;
DashedLines dash;
List<Node> path = new ArrayList<>();
ControlP5 cp5;
int currentFloor = 1;
PImage backgroundImage;

void setup() {
    size(1200, 800);
    layout = new Layout();
    mapRenderer = new MapRenderer(layout.getGraph(), this);
    uiController = new UIController(this, layout.getGraph());
    cp5 = new ControlP5(this);

    currentFloor = 1;
    mapRenderer.changeFloor(currentFloor);
    backgroundImage = loadImage("Floor_" + currentFloor + ".png");
    mouseReleased();
}

void draw() {
    background(20);

    if (backgroundImage != null) {
        image(backgroundImage, 0, 0, width, 540);
    }

    mapRenderer.render(path);
    uiController.render();
}

// updatePath() - Opdaterer stien baseret på de valgte start- og slutnoder
void updatePath(String start, String end) {
    if (!layout.getGraph().getAllNodes().containsKey(start)) {
        println("Fejl: Startnode '" + start + "' blev ikke fundet i grafen.");
        return;
    }
    if (!layout.getGraph().getAllNodes().containsKey(end)) {
        println("Fejl: Slutnode '" + end + "' blev ikke fundet i grafen.");
        return;
    }

    println("Beregner sti fra " + start + " til " + end);
    Dijkstra dijkstra = new Dijkstra(layout.getGraph());
    path = dijkstra.findShortestPath(start, end);

    if (path == null || path.isEmpty()) {
        println("Fejl: Ingen sti fundet mellem '" + start + "' og '" + end + "'.");
    } else {
        println("Aktuel sti: " + path);
    }
}

// changeFloor() - Skift etage
void changeFloor(int floor) {
    int minFloor = layout.getGraph().getMinFloor();
    int maxFloor = layout.getGraph().getMaxFloor();
    if (floor >= minFloor && floor <= maxFloor) {
        currentFloor = floor;
        mapRenderer.changeFloor(floor);
        backgroundImage = loadImage("Floor_" + floor + ".png");
        println("Aktuel etage: " + currentFloor);
    }
}

import java.util.*;

class UIController {
    ControlP5 cp5;
    Graph graph;
    HCOLMaps parent;
    String startNode = "";
    String endNode = "";

    UIController(HCOLMaps parent, Graph graph) {
        this.parent = parent;
        this.graph = graph;
        cp5 = new ControlP5(parent);

        String[] roomIds = getRoomIds();
        cp5.setFont(createFont("Arial", 14, true));

        // Dropdown til at vælge startnode
        cp5.addDropdownList("startNodeDropdown")
           .setPosition(40, parent.height - 200)
           .setSize(200, 200)
           .setBarHeight(30)
           .setItemHeight(25)
           .setOpen(false)
           .setLabel("Start")
           .setColorBackground(color(50))
           .setColorActive(color(150))
           .setColorForeground(color(180))
           .addItems(roomIds)
           .onChange(event -> {
               int selectedIndex = (int) event.getController().getValue();
               if (selectedIndex >= 0 && selectedIndex < roomIds.length) {
                   startNode = roomIds[selectedIndex];
                   event.getController().setCaptionLabel(startNode);
                   println("Startnode valgt: " + startNode);
                   updatePath();
               } else {
                   println("Ugyldigt indeks valgt: " + selectedIndex);
               }
           });

        // Dropdown til at vælge slutnode
        cp5.addDropdownList("endNodeDropdown")
           .setPosition(260, parent.height - 200)
           .setSize(200, 200)
           .setBarHeight(30)
           .setItemHeight(25)
           .setOpen(false)
           .setLabel("Slut")
           .setColorBackground(color(50))
           .setColorActive(color(150))
           .setColorForeground(color(180))
           .addItems(roomIds)
           .onChange(event -> {
               int selectedIndex = (int) event.getController().getValue();
               if (selectedIndex >= 0 && selectedIndex < roomIds.length) {
                   endNode = roomIds[selectedIndex];
                   event.getController().setCaptionLabel(endNode);
                   println("Slutnode valgt: " + endNode);
                   updatePath();
               } else {
                   println("Ugyldigt indeks valgt: " + selectedIndex);
               }
           });

        // Knapper til at skifte etager
        cp5.addButton("floorUp")
           .setLabel("Op")
           .setPosition(700, parent.height - 200) // Justeret y-position for at matche dropdown-menuer
           .setSize(50, 30)
           .setColorBackground(color(50))
           .setColorActive(color(150))
           .setColorForeground(color(180))
           .onClick(event -> {
               parent.changeFloor(parent.currentFloor + 1);
               updateFloorLabel();
               updateFloorButtons();
           });

        cp5.addButton("floorDown")
           .setLabel("Ned")
           .setPosition(760, parent.height - 200) // Justeret y-position for at matche dropdown-menuer
           .setSize(50, 30)
           .setColorBackground(color(50))
           .setColorActive(color(150))
           .setColorForeground(color(180))
           .onClick(event -> {
               parent.changeFloor(parent.currentFloor - 1);
               updateFloorLabel();
               updateFloorButtons();
           });

        // Etiket for at vise den aktuelle etage
        cp5.addTextlabel("floorLabel")
           .setText("Etage: " + parent.currentFloor)
           .setPosition(700, 150)
           .setSize(100, 30);

        updateFloorButtons();
    }

    void render() {
        fill(200);
        textSize(16);
        textAlign(LEFT, CENTER);
        text("Vælg:", 40, parent.height - 220);
        text("Vælg:", 260, parent.height - 220);
    }

    // Opdaterer stien baseret på de valgte start- og slutnoder
    void updatePath() {
        if (startNode.isEmpty() || endNode.isEmpty()) {
            println("Advarsel: Start- eller slutnode er ikke valgt.");
            return;
        }
        println("Opdaterer sti fra " + startNode + " til " + endNode);

        parent.updatePath(startNode, endNode);

        // Beregn og udskriv den samlede vægt af stien
        List<Node> path = parent.path;
        if (path != null && path.size() > 1) {
            int totalWeight = 0;
            for (int i = 0; i < path.size() - 1; i++) {
                Node current = path.get(i);
                Node next = path.get(i + 1);
                int weight = graph.adjacencyList.get(current.id).get(next.id);
                totalWeight += weight;
            }
            println("Samlet vægt af stien: " + totalWeight);
        } else {
            println("Ingen gyldig sti fundet.");
        }
    }

    String[] getNodeIds() {
        // Hent alle node-ID'er fra grafen og sorter dem alfabetisk
        return graph.getAllNodes().keySet().stream()
            .sorted()
            .toArray(String[]::new);
    }

    // Hent kun ID'er for rum ("rooms") og sorter dem med korrekt numerisk rækkefølge
    String[] getRoomIds() {
        return graph.rooms.keySet().stream()
            .sorted((a, b) -> {
                String[] aParts = a.split("\\.");
                String[] bParts = b.split("\\.");
                for (int i = 0; i < Math.min(aParts.length, bParts.length); i++) {
                    try {
                        int comparison = Integer.compare(
                            Integer.parseInt(aParts[i]),
                            Integer.parseInt(bParts[i])
                        );
                        if (comparison != 0) return comparison;
                    } catch (NumberFormatException e) {
                        // Fald tilbage til leksikografisk sammenligning for ikke-numeriske dele
                        int comparison = aParts[i].compareTo(bParts[i]);
                        if (comparison != 0) return comparison;
                    }
                }
                return Integer.compare(aParts.length, bParts.length);
            })
            .toArray(String[]::new);
    }

    private void updateFloorLabel() {
        cp5.get(Textlabel.class, "floorLabel").setText("Etage: " + parent.currentFloor);
    }

    private void updateFloorButtons() {
        int minFloor = parent.layout.getGraph().getMinFloor();
        int maxFloor = parent.layout.getGraph().getMaxFloor();

        if (parent.currentFloor <= minFloor) {
            cp5.getController("floorDown").hide();
        } else {
            cp5.getController("floorDown").show();
        }

        if (parent.currentFloor >= maxFloor) {
            cp5.getController("floorUp").hide();
        } else {
            cp5.getController("floorUp").show();
        }
    }
}

import garciadelcastillo.dashedlines.*;
class MapRenderer {
    float dist = 0;
    DashedLines dash;
    Graph graph;
    int currentFloor = 1;
    PApplet parent;

    MapRenderer(Graph graph, PApplet parent) {
        this.graph = graph;
        this.parent = parent;
        dash = new DashedLines(parent);
    }

    void render(List<Node> path) {
        dash.pattern(10, 10);
        // Tegn en boks rundt om kortet
        stroke(50);
        strokeWeight(2);
        noFill();
        rect(10, 10, width - 20, height - 270);

        // Tegn kanter (gange) på den aktuelle etage
        stroke(150);
        strokeWeight(2);
        for (String from : graph.adjacencyList.keySet()) {
            Node nodeA = getNode(from);
            if (nodeA == null || (nodeA instanceof Room && ((Room) nodeA).floor != currentFloor) ||
                (nodeA instanceof Intersection && ((Intersection) nodeA).floor != currentFloor)) continue;
            for (String to : graph.adjacencyList.get(from).keySet()) {
                Node nodeB = getNode(to);
                if (nodeB == null || (nodeB instanceof Room && ((Room) nodeB).floor != currentFloor) ||
                    (nodeB instanceof Intersection && ((Intersection) nodeB).floor != currentFloor)) continue;
                line(nodeA.x, nodeA.y, nodeB.x, nodeB.y);
            }
        }

        // Tegn korteste sti på den aktuelle etage
        if (path != null && path.size() > 1) {
            strokeWeight(3);
            for (int i = 0; i < path.size() - 1; i++) {
                Node a = path.get(i);
                Node b = path.get(i + 1);

                if (a == null || b == null) {
                    println("Advarsel: Null node i stien ved indeks " + i);
                    continue;
                }

                if ((a instanceof Room && ((Room) a).floor != currentFloor) ||
                    (a instanceof Intersection && ((Intersection) a).floor != currentFloor) ||
                    (b instanceof Room && ((Room) b).floor != currentFloor) ||
                    (b instanceof Intersection && ((Intersection) b).floor != currentFloor)) {
                    continue;
                }

                if (a instanceof Room && ((Room) a).floor == currentFloor) {
                    fill(0, 100, 255);
                    ellipse(a.x, a.y, 30, 30);
                }
                if (b instanceof Room && ((Room) b).floor == currentFloor) {
                    fill(0, 100, 255);
                    ellipse(b.x, b.y, 30, 30);
                }
                if (a instanceof Staircase && (((Staircase) a).startFloor == currentFloor || ((Staircase) a).endFloor == currentFloor)) {
                    fill(0, 100, 255);
                    rect(a.x - 15, a.y - 15, 30, 30);
                }
                if (b instanceof Staircase && (((Staircase) b).startFloor == currentFloor || ((Staircase) b).endFloor == currentFloor)) {
                    fill(0, 100, 255);
                    rect(b.x - 15, b.y - 15, 30, 30);
                }

                stroke(0, 100, 255);
                line(a.x, a.y, b.x, b.y);

                stroke(0, 200, 255);
                dash.offset(dist);
                dash.line(a.x, a.y, b.x, b.y);

                dist += 0.1;
            }
        }
        noStroke();

        // Tegn alle værelser (grå cirkler og etiketter)
        fill(200);
        for (Room room : graph.rooms.values()) {
            if (room.floor != currentFloor) continue;
            ellipse(room.x, room.y, 30, 30);
            fill(0);
            textAlign(CENTER, CENTER);
            text(room.id, room.x, room.y - 20);
        }

        // Tegn alle trapper (grå rektangler og etiketter)
        for (Staircase staircase : graph.staircases.values()) {
            if (staircase.startFloor != currentFloor && staircase.endFloor != currentFloor) continue;
            rect(staircase.x - 15, staircase.y - 15, 30, 30);
            fill(0);
            textAlign(CENTER, CENTER);
            text(staircase.id, staircase.x, staircase.y - 20);
        }

        // Fremhæv værelser og trapper i stien (blå cirkler og rektangler)
        if (path != null && path.size() > 1) {
            for (int i = 0; i < path.size(); i++) {
                Node node = path.get(i);

                if (node instanceof Room && ((Room) node).floor == currentFloor) {
                    fill(0, 100, 255);
                    ellipse(node.x, node.y, 30, 30);
                }
                if (node instanceof Staircase && (((Staircase) node).startFloor == currentFloor || ((Staircase) node).endFloor == currentFloor)) {
                    fill(0, 100, 255);
                    rect(node.x - 15, node.y - 15, 30, 30);
                }
            }
        }
    }

    // Hjælpemetode til at hente en node fra grafen baseret på ID
    Node getNode(String id) {
        if (graph.rooms.containsKey(id)) return graph.rooms.get(id);
        if (graph.intersections.containsKey(id)) return graph.intersections.get(id);
        if (graph.staircases.containsKey(id)) return graph.staircases.get(id);
        return null;
    }

    void changeFloor(int floor) {
        currentFloor = floor;
    }
}

import java.util.*;

class Dijkstra {
    Graph graph;

    Dijkstra(Graph graph) {
        this.graph = graph;
    }

    List<Node> findShortestPath(String start, String end) {
        return dijkstra(graph, start, end);
    }

    List<Node> dijkstra(Graph graph, String start, String end) {
        // Initialiser afstande og prioritetskø
        Map<String, Integer> distances = new HashMap<>();
        Map<String, String> previous = new HashMap<>();
        PriorityQueue<String> pq = new PriorityQueue<>(Comparator.comparingInt(distances::get));

        HashMap<String, Node> allNodes = graph.getAllNodes();
        for (String node : allNodes.keySet()) {
            distances.put(node, Integer.MAX_VALUE);
            previous.put(node, null);
        }
        distances.put(start, 0);
        pq.add(start);

        // Beregn korteste vej
        while (!pq.isEmpty()) {
            String current = pq.poll();

            // Spring over mellemliggende "Room"-noder
            if (!current.equals(start) && !current.equals(end) && allNodes.get(current) instanceof Room) {
                continue;
            }

            if (current.equals(end)) {
                break;
            }

            Map<String, Integer> neighbors = graph.adjacencyList.get(current);
            if (neighbors != null) {
                for (String neighbor : neighbors.keySet()) {
                    int newDist = distances.get(current) + neighbors.get(neighbor);
                    if (newDist < distances.get(neighbor)) {
                        distances.put(neighbor, newDist);
                        previous.put(neighbor, current);
                        pq.add(neighbor);
                    }
                }
            }
        }

        // Rekonstruer vejen fra slut til start
        List<Node> path = new ArrayList<>();
        for (String at = end; at != null; at = previous.get(at)) {
            path.add(allNodes.get(at));
        }
        Collections.reverse(path);
        return path;
    }
}

import processing.data.JSONObject;
import processing.data.JSONArray;
//im finna be real witchu chief, I don't know what this is

class Graph {
    HashMap<String, Room> rooms = new HashMap<>();
    HashMap<String, Intersection> intersections = new HashMap<>();
    HashMap<String, Staircase> staircases = new HashMap<>();
    HashMap<String, HashMap<String, Integer>> adjacencyList = new HashMap<>();

    void loadFromJson(String filePath) {
        JSONObject data = loadJSONObject(filePath);
        JSONArray nodes = data.getJSONArray("nodes");
        JSONArray edges = data.getJSONArray("edges");

        // Indlæs noder
        for (int i = 0; i < nodes.size(); i++) {
            JSONObject node = nodes.getJSONObject(i);
            String type = node.getString("type");
            String id = node.getString("id");
            float x = node.getFloat("x");
            float y = node.getFloat("y");

            if (type.equals("Room")) {
                int floor = node.getInt("floor");
                addRoom(id, x, y, floor);
            } else if (type.equals("Intersection")) {
                int floor = node.getInt("floor");
                addIntersection(id, x, y, floor);
            } else if (type.equals("Staircase")) {
                int startFloor = node.getInt("startFloor");
                int endFloor = node.getInt("endFloor");
                addStaircase(id, x, y, startFloor, endFloor);
            }
        }

        // Indlæs kanter
        for (int i = 0; i < edges.size(); i++) {
            JSONObject edge = edges.getJSONObject(i);
            String from = edge.getString("from");
            String to = edge.getString("to");
            addEdge(from, to);
        }
    }

    void addRoom(String id, float x, float y, int floor) {
        Room room = new Room(id, x, y, floor);
        rooms.put(id, room);
        adjacencyList.put(id, new HashMap<>());
    }

    void addIntersection(String id, float x, float y, int floor) {
        Intersection intersection = new Intersection(id, x, y, floor);
        intersections.put(id, intersection);
        adjacencyList.put(id, new HashMap<>());
    }

    void addStaircase(String id, float x, float y, int startFloor, int endFloor) {
        Staircase staircase = new Staircase(id, x, y, startFloor, endFloor);
        staircases.put(id, staircase);
        adjacencyList.put(id, new HashMap<>());
    }

    void addEdge(String from, String to) {
        Node nodeA = getAllNodes().get(from);
        Node nodeB = getAllNodes().get(to);

        if (nodeA == null || nodeB == null) {
            println("Fejl: En eller begge noder blev ikke fundet for kanten: " + from + " -> " + to);
            return;
        }

        // Beregn vægt baseret på pixelafstand mellem noder
        int weight = (int) dist(nodeA.x, nodeA.y, nodeB.x, nodeB.y);

        if (!adjacencyList.containsKey(from)) {
            adjacencyList.put(from, new HashMap<>());
        }
        if (!adjacencyList.containsKey(to)) {
            adjacencyList.put(to, new HashMap<>());
        }
        adjacencyList.get(from).put(to, weight);
        adjacencyList.get(to).put(from, weight);
    }

    void addNode(Node node) {
        if (node instanceof Room) {
            rooms.put(node.id, (Room) node);
        } else if (node instanceof Intersection) {
            intersections.put(node.id, (Intersection) node);
        } else if (node instanceof Staircase) {
            staircases.put(node.id, (Staircase) node);
        }
        adjacencyList.put(node.id, new HashMap<>());
    }

    void addEdge(String from, String to, int weight) {
        if (!adjacencyList.containsKey(from)) {
            adjacencyList.put(from, new HashMap<>());
        }
        if (!adjacencyList.containsKey(to)) {
            adjacencyList.put(to, new HashMap<>());
        }
        adjacencyList.get(from).put(to, weight);
        adjacencyList.get(to).put(from, weight);
    }

    HashMap<String, Node> getAllNodes() {
        HashMap<String, Node> allNodes = new HashMap<>();
        allNodes.putAll(rooms);
        allNodes.putAll(intersections);
        allNodes.putAll(staircases);
        return allNodes;
    }

    // Minimum og maksimum etage
    int getMinFloor() {
        int minFloor = Integer.MAX_VALUE;
        for (Room room : rooms.values()) {
            if (room.floor < minFloor) {
                minFloor = room.floor;
            }
        }
        for (Intersection intersection : intersections.values()) {
            if (intersection.floor < minFloor) {
                minFloor = intersection.floor;
            }
        }
        for (Staircase staircase : staircases.values()) {
            if (staircase.startFloor < minFloor) {
                minFloor = staircase.startFloor;
            }
            if (staircase.endFloor < minFloor) {
                minFloor = staircase.endFloor;
            }
        }
        return minFloor;
    }

    int getMaxFloor() {
        int maxFloor = Integer.MIN_VALUE;
        for (Room room : rooms.values()) {
            if (room.floor > maxFloor) {
                maxFloor = room.floor;
            }
        }
        for (Intersection intersection : intersections.values()) {
            if (intersection.floor > maxFloor) {
                maxFloor = intersection.floor;
            }
        }
        for (Staircase staircase : staircases.values()) {
            if (staircase.startFloor > maxFloor) {
                maxFloor = staircase.startFloor;
            }
            if (staircase.endFloor > maxFloor) {
                maxFloor = staircase.endFloor;
            }
        }
        return maxFloor;
    }
}

class Node {
    String id;
    float x, y;

    Node(String id, float x, float y) {
        this.id = id;
        this.x = x;
        this.y = y;
    }

    @Override
    public String toString() {
        return id;
    }
}

class Room extends Node {
    int floor;

    Room(String name, float x, float y, int floor) {
        super(name, x, y);
        this.floor = floor;
    }
}

class Staircase extends Node {
    int startFloor, endFloor;

    Staircase(String id, float x, float y, int startFloor, int endFloor) {
        super(id, x, y);
        this.startFloor = startFloor;
        this.endFloor = endFloor;
    }
}

class LayoutManager {
    Graph graph;

    LayoutManager(Graph graph) {
        this.graph = graph;
    }
}

class Layout {
    Graph graph;

    Layout() {
        graph = new Graph();
        graph.loadFromJson("Data.json"); 
    }

    Graph getGraph() {
        return graph;
    }
}

class Intersection extends Node {
    int floor;

    Intersection(String name, float x, float y, int floor) {
        super(name, x, y);
        this.floor = floor;
    }
}

class Hallway {
    String start, end;
    float weight;

    Hallway(String start, String end, HashMap<String, Node> allNodes) {
        this.start = start;
        this.end = end;

        // Beregn vægten dynamisk baseret på pixeldistancen
        Node nodeA = allNodes.get(start);
        Node nodeB = allNodes.get(end);
        if (nodeA != null && nodeB != null) {
            this.weight = dist(nodeA.x, nodeA.y, nodeB.x, nodeB.y);
        } else {
            this.weight = 0; 
        }
    }
}